language: python

sudo: false

python:
  - "2.7"
  - "3.2"
  - "3.3"
  - "3.4"
  - "3.5"
env:
  global:
    - BUILD_DIR=build
    - PYTHON_FILES=*.py test/*.py release
    - DOCS_DIR=docs
    - DOCS_COVERAGE=docs/_build/coverage/python.txt

install:
  - pip install --upgrade pip
  - pip install --upgrade yapf
  - pip install --upgrade pytz
  - pip install --upgrade sphinx
  - pip install --upgrade requests
  - pip install --upgrade pystache
  - pip install --upgrade coverage
  - pip install --upgrade coveralls

before_script:
  - mkdir "${BUILD_DIR}"
  # Export the python version to the shell
  - eval $(python -c "import sys;
      print('export PYTHON_MAJOR={0};
             export PYTHON_MINOR={1};
             export PYTHON_PATCH={2}'.format(
        *sys.version.split()[0].split('.')))")

script:
  # Run the unit tests
  - if [ $PYTHON_MAJOR -lt 3 ] || ( [ $PYTHON_MAJOR -eq 3 ] && [ $PYTHON_MINOR -ge 3 ] ); then
      nosetests --with-coverage --cover-package=pygh;
    else
      nosetests;
    fi
  # Check documentation coverage
  - if [ $PYTHON_MAJOR -lt 3 ] || ( [ $PYTHON_MAJOR -eq 3 ] && [ $PYTHON_MINOR -ge 3 ] ); then
      make -C ${DOCS_DIR} coverage &&
      test $(sed -n '$=' "${DOCS_COVERAGE}") -eq 2 || (
        >&2 echo "All APIs should have documentation:" &&
        >&2 cat "${DOCS_COVERAGE}" &&
        false
      );
    fi
  # Check style is correct
  - if [ $PYTHON_MAJOR -lt 3 ] || ( [ $PYTHON_MAJOR -eq 3 ] && [ $PYTHON_MINOR -ge 4 ] ); then
      yapf -d ${PYTHON_FILES} > "${BUILD_DIR}/style.diff" || (
        >&2 echo "The style is incorrect:" &&
        >&2 cat "${BUILD_DIR}/style.diff" &&
        false
      );
    fi

after_success:
  - if [ $PYTHON_MAJOR -lt 3 ] || ( [ $PYTHON_MAJOR -eq 3 ] && [ $PYTHON_MINOR -ge 3 ] ); then
      coveralls;
    fi
